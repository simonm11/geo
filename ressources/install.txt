#########################################
 Juste pour pas oublier les truc à faire
#########################################

1 -- Creation de la base de données avec les truc openstreetmap

1.1 Création d'une base de données

  > createdb gis

1.2 Activer les extensions postgis

  > psql -d gis
  > CREATE EXTENSION postgis;
  > CREATE EXTENSION postgis_topology;
  > CREATE EXTENSION fuzzystrmatch;
  > CREATE EXTENSION postgis_tiger_geocoder;

1.3 osm2pgsql

  > osm2pgsql -s -U postgres -d gis /srv/http/www/gis/ressources/map.osm

2 -- Configuration de GeoServer

Add New Store > PostGIS > Publish line & polygons

3 -- pgRouting

3.1 Création d'une table de routing

(c'est surement possible d'utiliser la même table, mais je préfére pas essayer!)

  > createdb routing
  > psql -d routing
  > CREATE EXTENSION postgis;
  > CREATE EXTENSION pgrouting;

3.2 osm2pgrouting

  > osm2pgrouting -file map.osm -conf mapconfig.xml -dbname routing -user postgres -clean

3.3 fonction d'exemple d'utilisation de pgrouting (voir fichier fromAtoB.sql, j'ai recup ça ici : http://workshop.pgrouting.org/chapters/wrapper.html)

  > psql -U postgres -d routing -f ./ressources/fromAtoB.sql

3.4 GeoServer

voir : http://workshop.pgrouting.org/chapters/geoserver.html


###########################################
              Truc offline
###########################################

1 - Génération des fichiers lines.geojson et polygon.geojson

    > ./pgsql2geojson.py -d "PG:host=localhost dbname=gis user=postgres"

    ce script execute la commande suivante puis enleve les valeurs null :

    > ogr2ogr -f GeoJSON out_lines.json "PG:host=localhost dbname=gis user=postgres password=" -sql "select * from planet_osm_line"

    > SELECT * FROM planet_osm_polygon as a left join (SELECT DISTINCT osm_id, array_to_string(array_agg(DISTINCT CONCAT(s.id,',',s.name,',',s.url)), ';') FROM (planet_osm_polygon left join services_batiments on osm_id=id_batiment) left join services as s on s.id=id_service GROUP BY osm_id) as b on a.osm_id=b.osm_id

2 - Génération de routing.json

    > ./genRouting.py -o ./routing.json -d "PG:host=localhost dbname=routing user=postgres"

    OU

    > ogr2ogr -f CSV out.csv "PG:host=localhost dbname=routing2 user=postgres password=" -sql "select gid, length, x1, y1, x2, y2, osm_id, ST_AsText(the_geom) as geom, source, target from ways"
    > ./csv2json.py out.csv routing.json

#############################################
                Online
#############################################

  1 - Pour activer jsonp :
    Rajouter dans geoserver/webapps/WEB-INF/web.xml 
        <context-param>
            <param-name>ENABLE_JSONP</param-name>
            <param-value>true</param-value>
        </context-param>

  2 - SQL View pour parking le plus proche : 
      geoserver->couche->new->gis->Configurer une nouvelle vue SQL
      nom : closestService
      directive : 
        select * from planet_osm_polygon where osm_id in 
        (select services_batiments.id_batiment from services join services_batiments on (services_batiments.id_service = services.id) where services.name=%sname%)
          ORDER BY ST_Distance(planet_osm_polygon.way, ST_Transform(ST_SetSRID(ST_MakePoint(%x%, %y%), 4326), 900913)) LIMIT 1


      Deviner les params SQL
      x : 
        Valeur par defaut : 0
        Regex : ^[\d\.\+-eE]+$
      y : 
        Valeur par defaut : 0
        Regex : ^[\d\.\+-eE]+$
      sname :
        Valeur par defaut : 'parking'
        Regex : vide (Je suis nul en regexp :D 'faudrait en faire une pour accepter que les mots + espace + chiffre)

       Actualiser -> cocher osm_id comme identifiant
       change way SRID en 900913
       
      et publier normalement (emprise basés sur les données etc...)

  3 - SQL View pour batiment à partir de osmId : 
        Pareil qu'avant avec
          nom : getBuildingFromOsmId
          sql : select * from planet_osm_polygon where osm_id=%id%
          expression reguliere : ^[\d\.\+-eE]+$ ( A changer pour prendre que entier )

  3 - Services
    SQL : 
      //--------------------------PLUS MAINTENANT--------------------------
      - update planet_osm_polygon set service='parking' where osm_id in (select osm_id from planet_osm_polygon where amenity='parking');
      - update planet_osm_polygon set service='restaurant' where osm_id in (select osm_id from planet_osm_polygon where amenity='restaurant');
      - update planet_osm_polygon set service='bibliotheque' where osm_id in (select osm_id from planet_osm_polygon where amenity='library');
      //--------------------------PLUS MAINTENANT--------------------------

      - Create table services (
        id BIGSERIAL PRIMARY KEY NOT NULL, 
        name TEXT NOT NULL,
        url TEXT);

      - Create table services_batiments(
        id BIGSERIAL PRIMARY KEY NOT NULL, 
        id_service BIGINT NOT NULL,
        id_batiment BIGINT NOT NULL);

      - insert into services (name) values('parking');
      - insert into services (name) values('bibliotheque');
      - insert into services (name) values('restaurant'); 

      - insert into services_batiments(id_service, id_batiment) select services.id,planet_osm_polygon.osm_id from planet_osm_polygon join services on (planet_osm_polygon.amenity = services.name);
      - insert into services_batiments(id_service, id_batiment) select services.id,planet_osm_polygon.osm_id from planet_osm_polygon join services on (planet_osm_polygon.amenity = 'library' and services.name='bibliotheque');

select * from planet_osm_polygon left join (select * from services_batiments left join services on osm_id=id_batiment) as b on osm_id=b.id_batiment;
