#########################################
 Juste pour pas oublier les truc à faire
#########################################

1 -- Creation de la base de données avec les truc openstreetmap

1.1 Création d'une base de données

  > createdb gis

1.2 Activer les extensions postgis

  > psql -d gis
  > CREATE EXTENSION postgis;
  > CREATE EXTENSION postgis_topology;
  > CREATE EXTENSION fuzzystrmatch;
  > CREATE EXTENSION postgis_tiger_geocoder;

1.3 osm2pgsql

  > osm2pgsql -s -U postgres -d gis /srv/http/www/gis/ressources/map.osm

2 -- Configuration de GeoServer

Add New Store > PostGIS > Publish line & polygons

3 -- pgRouting

3.1 Création d'une table de routing

(c'est surement possible d'utiliser la même table, mais je préfére pas essayer!)

  > createdb routing
  > psql -d routing
  > CREATE EXTENSION postgis;
  > CREATE EXTENSION pgrouting;

3.2 osm2pgrouting

  > osm2pgrouting -file map.osm -conf mapconfig.xml -dbname routing -user postgres -clean

3.3 fonction d'exemple d'utilisation de pgrouting (voir fichier fromAtoB.sql, j'ai recup ça ici : http://workshop.pgrouting.org/chapters/wrapper.html)

  > psql -U postgres -d routing -f ./ressources/fromAtoB.sql

3.4 GeoServer

voir : http://workshop.pgrouting.org/chapters/geoserver.html


###########################################
              Truc offline
###########################################

1 - Génération des fichiers lines.geojson et polygon.geojson

    > ./pgsql2geojson.py -d "PG:host=localhost dbname=gis user=postgres"

    ce script execute la commande suivante puis enleve les valeurs null :

    > ogr2ogr -f GeoJSON out_lines.json "PG:host=localhost dbname=gis user=postgres password=" -sql "select * from planet_osm_line"

2 - Génération de routing.json

    > ./genRouting.py -o ./routing.json -d "PG:host=localhost dbname=routing user=postgres"

    OU

    > ogr2ogr -f CSV out.csv "PG:host=localhost dbname=routing2 user=postgres password=" -sql "select gid, length, x1, y1, x2, y2, osm_id, ST_AsText(the_geom) as geom, source, target from ways"
    > ./csv2json.py out.csv routing.json

#############################################
                Online
#############################################

  1 - Pour activer jsonp :
    Rajouter dans geoserver/webapps/WEB-INF/web.xml 
        <context-param>
            <param-name>ENABLE_JSONP</param-name>
            <param-value>true</param-value>
        </context-param>

  2 - SQL View pour parking le plus proche : 
      geoserver->couche->new->gis->Configurer une nouvelle vue SQL
      nom : closestParking
      directive : 
        SELECT * 
          FROM planet_osm_polygon
          WHERE amenity='parking'
          ORDER BY ST_Distance(planet_osm_polygon.way, ST_Transform(ST_SetSRID(ST_MakePoint(%x%, %y%), 4326), 900913)) LIMIT 1

      Deviner les params SQL
      x : 
        Valeur par defaut : 0
        Regex : ^[\d\.\+-eE]+$
      y : 
        Valeur par defaut : 0
        Regex : ^[\d\.\+-eE]+$

      et publier normalement (emprise basés sur les données etc...)

  3 - Services
    SQL : 
      - update planet_osm_polygon set service='parking' where osm_id in (select osm_id from planet_osm_polygon where amenity='parking');
      - update planet_osm_polygon set service='restaurant' where osm_id in (select osm_id from planet_osm_polygon where amenity='restaurant');
      - update planet_osm_polygon set service='bibliotheque' where osm_id in (select osm_id from planet_osm_polygon where amenity='library');


